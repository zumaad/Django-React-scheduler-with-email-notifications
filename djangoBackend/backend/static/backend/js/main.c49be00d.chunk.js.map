{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["moment","require","jQuery","getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","combineDate","dateObj","hoursObj","combinedDate","Date","toLocaleDateString","setHours","hours","setMinutes","minutes","HomePage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","username","password","errorMessage","schedule","toggleUserSchedule","bind","assertThisInitialized","trackUsername","trackPassword","validateUser","fetchData","react_default","a","createElement","App_App","className","onChange","value","placeholder","required","type","onClick","style","color","_this2","myData","fetch","backend_url","method","credentials","headers","X-CSRFToken","Accept","Content-Type","X-Requested-With","body","JSON","stringify","then","response","json","data","catch","ex","console","log","setState","event","target","React","Component","App","_this3","categories","potentialCategory","timezone","keyCount","timezoneMapping","America/Chicago","America/Denver","America/Los_Angeles","America/New_York","tasksCompleted","hasChanged","updateFail","displayUpdateSuccess","notificationMap","whichView","trackCategoryInput","addCategory","cloneObject","addTask","deleteTask","deleteCategory","updateItem","timezoneListener","markAsComplete","pushData","pushDataHelper","cleanNotificationMap","switchViews","obj","clone","e","copiedState","alert","taskName","categoryToAddTo","hasDeadline","hasDeadlineHour","deadline","progress","priority","deadlineHour","key","note","notificationDate","notificationHour","nameAndCategory","category","copiedNotificationMap","copiedCategories","categoryName","task","itemState","itemName","itemCategory","newDeadline","newProgress","newDeadlineHour","id","itemNotes","date","hour","timezoneval","_this4","_this5","userData","_this6","currentTime","tz","isBefore","_this7","_this8","setTimeout","viewSpecificContent","hasChangedMessage","updateFailedMessage","updateSuccessMessage","sortedButtonText","App_SortedView","updateItemFunc","deleteTaskFunc","markAsCompleteFunc","App_CategoryList","trackTask","trackTaskInput","addTaskFunc","deleteCategoryFunc","trackingTask","potentialTask","SortedView","_this9","compareDates","sortTask","task1","task2","task1Date","task2Date","valueOf","copiedTaskList","tasklist","copiedTask","push","sort","_this10","map","App_Item","CategoryList","_this11","keys","App_Category","items","Category","_this12","collapsed","collapseOrExpand","pushPotentialTask","_this13","App_ItemList","ItemList","_this14","Item","_this15","inEditingMode","timer","format","toggleEdit","trackDeadline","trackProgress","trackDeadlineHour","trackNotes","trackNotificationDate","trackNotificationHour","pushChanges","day","toString","toISOString","_this16","timeLeft","deadlineHourPlaceHolder","deadlineDatePlaceholder","notes","notificationDatePlaceholder","notificationHourPlaceholder","fullDeadlineDate","App_TimeLeftTimer","deadlineDate","DayPickerInput_default","onDayChange","es","showSecond","use12Hours","inputReadOnly","role","aria-valuemin","aria-valuemax","width","rows","margin","aria-valuenow","TimeLeftTimer","_this17","interval","difference","duration","diff","clearInterval","days","seconds","setInterval","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c49be00d.chunk.js","sourcesContent":["import React from 'react';\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\nimport TimePicker from 'rc-time-picker';\nimport 'rc-time-picker/assets/index.css';\nimport 'react-day-picker/lib/style.css';\nimport './App.css';\n\nlet moment = require('moment-timezone');\nlet jQuery = require('jquery')\n// let backend_url = 'http://django-backend.9fmrc2bztn.us-east-1.elasticbeanstalk.com/'\nlet backend_url = 'http://schedulingfor.me/'\n\nfunction getCookie(name) {\n    var cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i < cookies.length; i++) {\n            var cookie = jQuery.trim(cookies[i]);\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n};\n\nfunction combineDate(dateObj, hoursObj) {\n    let combinedDate = new Date(dateObj.toLocaleDateString())\n    combinedDate.setHours(hoursObj.hours())\n    combinedDate.setMinutes(hoursObj.minutes())\n    let newDeadlineDate = moment(combinedDate);\n    return newDeadlineDate\n}\n\nclass HomePage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            username: '',\n            password: '',\n            errorMessage: '',\n            schedule: ''\n        }\n        this.toggleUserSchedule = this.toggleUserSchedule.bind(this);\n        this.trackUsername = this.trackUsername.bind(this);\n        this.trackPassword = this.trackPassword.bind(this);\n        this.validateUser = this.validateUser.bind(this);\n        this.fetchData = this.fetchData.bind(this)\n\n    }\n\n    render() {\n        if (!this.state.schedule) {\n            return (\n                <div className='main'>\n                    <div className=\"jumbotron text main\">\n                        <p className='jumbo-text'> Sign in</p>\n                        <div>\n                            <input onChange={this.trackUsername} value={this.state.username} placeholder='username'\n                                   required='true'/>\n                        </div>\n                        <div>\n                            <input type='password' onChange={this.trackPassword} value={this.state.password}\n                                   placeholder='password' required='true'/>\n                        </div>\n                        <br></br>\n                        <div>\n                            <button onClick={this.toggleUserSchedule} className=\"btn btn-success\"> Sign in!</button>\n                        </div>\n                        <p style={{color: 'red'}}>{this.state.errorMessage}</p>\n                    </div>\n                </div>)\n        } else {\n        return <App username={this.state.username} password={this.state.password} schedule=\n            {this.state.schedule}/>\n        }\n\n    }\n\n    fetchData() {\n        let myData = {\n            username: this.state.username,\n            password: this.state.password\n        }\n\n        fetch(backend_url+'signIn/', {\n            method: \"post\",\n            credentials: \"same-origin\",\n            headers: {\n                'X-CSRFToken': getCookie(\"csrftoken\"),\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'X-Requested-With': 'XMLHttpRequest'\n            },\n            body: JSON.stringify(myData)\n        })\n            .then(response => response.json())\n            .then(data => this.validateUser(data)\n            ).catch(function (ex) {\n            console.log(\"parsing failed\", ex);\n        });\n\n    }\n\n    toggleUserSchedule() {\n        if (!this.state.username || !this.state.password) {\n            this.setState({errorMessage: 'You have to fill out both the password and username fields'})\n        } else {\n            this.fetchData()\n        }\n\n\n    }\n\n    trackUsername(event) {\n        this.setState({username: event.target.value})\n    }\n\n    trackPassword(event) {\n        this.setState({password: event.target.value})\n    }\n\n    validateUser(data) {\n        if (data === 'Incorrect password' || data === 'username does not exist') {\n            this.setState({errorMessage: data})\n        } else {\n            this.setState({schedule: data})\n        }\n\n    }\n}\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props)\n        if (this.props.schedule === 'None') {\n            this.state = {\n                categories: {},\n                potentialCategory: '',\n                timezone: 'America/New_York',\n                keyCount: 0,\n                timezoneMapping: {\n                    'America/Chicago': 'Central', 'America/Denver': 'Mountain', 'America/Los_Angeles': 'Pacific',\n                    'America/New_York': 'Eastern'\n                },\n                name: this.props.username,\n                tasksCompleted: 0,\n                hasChanged: false,\n                updateFail: false,\n                displayUpdateSuccess: false,\n                notificationMap: {},\n                whichView: 'Overall'\n            }\n        } else {\n            this.state = this.props.schedule\n        }\n\n\n        this.trackCategoryInput = this.trackCategoryInput.bind(this);\n        this.addCategory = this.addCategory.bind(this);\n        this.cloneObject = this.cloneObject.bind(this);\n        this.addTask = this.addTask.bind(this);\n        this.deleteTask = this.deleteTask.bind(this);\n        this.deleteCategory = this.deleteCategory.bind(this);\n        this.updateItem = this.updateItem.bind(this);\n        this.timezoneListener = this.timezoneListener.bind(this);\n        this.markAsComplete = this.markAsComplete.bind(this);\n        this.pushData = this.pushData.bind(this);\n        this.pushDataHelper = this.pushDataHelper.bind(this);\n        this.displayUpdateSuccess = this.displayUpdateSuccess.bind(this);\n        this.cleanNotificationMap = this.cleanNotificationMap.bind(this);\n        this.switchViews = this.switchViews.bind(this)\n\n\n    }\n\n    switchViews() {\n        if (this.state.whichView === 'sorted') {\n            this.setState({whichView: 'Overall'})\n        } else {\n            this.setState({whichView: 'sorted'})\n        }\n\n    }\n\n    // cloneObject(obj) {\n    //     let clone = {};\n    //     for (let i in obj) {\n    //         if (obj[i] != null && typeof (obj[i]) == \"object\" && !(obj[i].constructor.name == 'Date' || obj[i].constructor.name == 'Moment'))\n    //             clone[i] = this.cloneObject(obj[i]);\n    //         else if (obj[i].constructor.name == 'Date') {\n    //             clone[i] = new Date(obj[i].getTime())\n    //         } else if (obj[i].constructor.name == 'Moment') {\n    //             clone[i] = obj[i].clone()\n    //         } else\n    //             clone[i] = obj[i];\n    //     }\n    //     return clone;\n    // }\n\n\n    cloneObject(obj) {\n        let clone = {};\n        for (let i in obj) {\n            if (obj[i] != null && typeof (obj[i]) == \"object\")\n                clone[i] = this.cloneObject(obj[i]);\n            else\n                clone[i] = obj[i];\n        }\n        return clone;\n    }\n\n    trackCategoryInput(e) {\n        this.setState({potentialCategory: e.target.value})\n    }\n\n    addCategory() {\n        if (this.state.potentialCategory.length > 0) {\n            let copiedState = this.cloneObject(this.state);\n\n\n            copiedState.categories[copiedState.potentialCategory] = {};\n\n            this.setState(state => ({\n                categories: copiedState.categories,\n                hasChanged: true\n            }))\n            this.setState({potentialCategory: ''})\n        } else {\n            alert(\"you need to give the category a name\")\n        }\n\n\n    }\n\n    //i am using state right after setting it, since its async it might be a problem, could use callback\n    addTask(e, taskName) {\n        // let potentialTask = this.state.potentialTask;\n        if (taskName.length < 1) {\n            alert(\"you need to name your task\")\n            return\n        }\n        this.setState(state => ({\n            keyCount: state.keyCount + 1\n        }))\n\n        let categoryToAddTo = e.target.value\n        let copiedState = this.cloneObject(this.state);\n        copiedState.categories[categoryToAddTo][taskName] = {\n            hasDeadline: false,\n            hasDeadlineHour: false,\n            deadline: '',\n            progress: 0,\n            priority: '',\n            deadlineHour: '',\n            key: this.state.keyCount,\n            note: '',\n            notificationDate: '',\n            notificationHour: ''\n        };\n        this.setState(state => ({\n            categories: copiedState.categories,\n            hasChanged: true\n            // potentialTask:''\n        }))\n\n\n    }\n\n    deleteTask(nameAndCategory) {\n        let category = nameAndCategory.category;\n        let taskName = nameAndCategory.name;\n        let copiedNotificationMap = this.cloneObject(this.state.notificationMap)\n        if (taskName in copiedNotificationMap) {\n            delete copiedNotificationMap[taskName]\n        }\n\n        let copiedCategories = this.cloneObject(this.state.categories);\n        delete copiedCategories[category][taskName];\n\n        this.setState(state => ({\n            categories: copiedCategories,\n            hasChanged: true,\n            notificationMap: copiedNotificationMap\n        }))\n\n    }\n\n    deleteCategory(e) {\n        let categoryName = e.target.value;\n        let copiedCategories = this.cloneObject(this.state.categories);\n        let copiedNotificationMap = this.cloneObject(this.state.notificationMap)\n        for (let task in copiedCategories[categoryName]) {\n            if (task in copiedNotificationMap) {\n                delete copiedNotificationMap[task]\n            }\n        }\n        delete copiedCategories[categoryName];\n\n\n        this.setState(state => ({\n            categories: copiedCategories,\n            hasChanged: true,\n            notificationMap: copiedNotificationMap\n        }))\n\n    }\n\n    updateItem(itemState) {\n        let copiedCategories = this.cloneObject(this.state.categories);\n        let itemName = itemState.name\n        let itemCategory = itemState.category;\n        let newDeadline = itemState.deadline;\n        let newProgress = itemState.progress;\n        let newDeadlineHour = itemState.deadlineHour;\n        let hasDeadline = itemState.hasDeadline;\n        let hasDeadlineHour = itemState.hasDeadlineHour;\n        let key = itemState.id;\n        let itemNotes = itemState.note\n        let notificationDate = itemState.notificationDate;\n        let notificationHour = itemState.notificationHour;\n        let copiedNotificationMap = this.cloneObject(this.state.notificationMap)\n\n\n        if (notificationDate && notificationHour) {\n            copiedNotificationMap[itemName] = {date: notificationDate, hour: notificationHour}\n        }\n\n\n        copiedCategories[itemCategory][itemName] = {\n            hasDeadline: hasDeadline,\n            hasDeadlineHour: hasDeadlineHour,\n            deadline: newDeadline,\n            progress: newProgress,\n            priority: 'NA',\n            deadlineHour: newDeadlineHour,\n            key: key,\n            note: itemNotes,\n            notificationDate: notificationDate,\n            notificationHour: notificationHour\n        }\n\n        this.setState(state => ({\n            categories: copiedCategories,\n            hasChanged: true,\n            notificationMap: copiedNotificationMap\n        }))\n    }\n\n\n    timezoneListener(event) {\n        let timezoneval = event.target.value\n        this.setState(state => ({timezone: timezoneval}));\n\n    }\n\n    markAsComplete(nameAndCategory) {\n        let category = nameAndCategory.category;\n        let taskName = nameAndCategory.name;\n\n        let copiedCategories = this.cloneObject(this.state.categories);\n        delete copiedCategories[category][taskName];\n\n        this.setState(state => ({\n            categories: copiedCategories,\n            tasksCompleted: this.state.tasksCompleted + 1,\n            hasChanged: true\n        }))\n    }\n\n    pushData() {\n        let userData = {schedule: this.state, username: this.props.username, password: this.props.password}\n        fetch(backend_url+'update/', {\n            method: \"post\",\n            credentials: \"same-origin\",\n            headers: {\n                'X-CSRFToken': getCookie(\"csrftoken\"),\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'X-Requested-With': 'XMLHttpRequest'\n            },\n            body: JSON.stringify(userData)\n        }).then(function (response) {\n            return response.json();\n        }).then(data =>\n            this.displayUpdateSuccess()\n        ).catch(ex => {\n            this.setState({\n                updateFail: true,\n                hasChanged: true\n            })\n        });\n    }\n\n    cleanNotificationMap() {\n        console.log(\"cleaning notification map\")\n        console.log(\"b4\", this.state.notificationMap)\n        let copiedNotificationMap = this.cloneObject(this.state.notificationMap)\n        for (let task in copiedNotificationMap) {\n            let date = copiedNotificationMap[task].date\n            let hour = copiedNotificationMap[task].hour\n            let currentTime = moment.tz(this.state.timezone)\n            let fullNotificationDate = combineDate(new Date(date), moment(hour)).tz(this.state.timezone);\n            if (fullNotificationDate.isBefore(currentTime)) {\n                console.log(\"deleting\", task)\n                delete copiedNotificationMap[task]\n            }\n        }\n        /*\n        make sure that push data is only called after notificationmap is cleaned\n         */\n        this.setState({notificationMap: copiedNotificationMap}, () => this.pushData())\n\n    }\n\n    /*\n    Since setState is async, need to use push data as callback to ensure that it is called only after\n    state is actually changed(referring to when hasChanged is set to false).\n     */\n    pushDataHelper() {\n        this.setState({hasChanged: false}, () => {\n            this.cleanNotificationMap()\n        })\n    }\n\n    /*\n    shows that the update was successful for three seconds\n     */\n    displayUpdateSuccess() {\n        if (!this.state.displayUpdateSuccess) {\n            this.setState({updateFail: false, displayUpdateSuccess: true}, () => {\n                setTimeout(() => this.setState({displayUpdateSuccess: false}), 3000)\n            })\n        }\n\n\n    }\n\n    render() {\n        let viewSpecificContent = ''\n        let hasChangedMessage = ''\n        let updateFailedMessage = ''\n        let updateSuccessMessage = ''\n        let sortedButtonText = ''\n        if (this.state.whichView === 'sorted') {\n            viewSpecificContent = <SortedView schedule={this.state.categories}\n                                              updateItemFunc={this.updateItem}\n                                              deleteTaskFunc={this.deleteTask}\n                                              markAsCompleteFunc={this.markAsComplete}\n                                              timezone = {this.state.timezone}/>\n            sortedButtonText = 'Switch to overall view'\n        } else {\n            sortedButtonText = 'Switch to sorted view'\n            viewSpecificContent =\n                <div>\n                    <div className=\"align text\">\n                        <h2>Add to your schedule</h2>\n                        <input id=\"categoryInput\" onChange={this.trackCategoryInput}\n                               value={this.state.potentialCategory}\n                               placeholder=\"add a category\" type=\"text\"/>\n                        <button onClick={this.addCategory} className=\"btn btn-success\"> Add Category</button>\n                        <hr></hr>\n                        <br></br>\n                        <br></br>\n                    </div>\n                    <CategoryList trackTask={this.trackTaskInput}\n                                  deleteTaskFunc={this.deleteTask}\n                                  categories={this.state.categories}\n                                  addTaskFunc={this.addTask}\n                                  deleteCategoryFunc={this.deleteCategory}\n                                  updateItemFunc={this.updateItem}\n                                  timezone={this.state.timezone}\n                                  trackingTask={this.state.potentialTask}\n                                  markAsCompleteFunc={this.markAsComplete}\n\n                    />\n                </div>\n        }\n\n        if (this.state.hasChanged) {\n            hasChangedMessage =\n                <p style={{color: 'red'}}> Your schedule has changed since loading, make sure to save before\n                    exiting!</p>\n        } else {\n            hasChangedMessage = <p style={{color: 'yellow'}}> No changes detected since last save</p>\n\n        }\n        if (this.state.updateFail) {\n            updateFailedMessage =\n                <p style={{color: 'red'}}>Your changes weren't able to be pushed to the server, check your internet\n                    connection.</p>\n\n        }\n        if (this.state.displayUpdateSuccess) {\n            updateSuccessMessage = <p style={{color: 'lawngreen'}}> Data pushed successfully to server!</p>\n        }\n        return (\n            <div className='main'>\n                <div className=\"jumbotron text main\">\n                    <p className=\"jumbo-text\"> Make a Schedule!</p>\n                    <p>Welcome, {this.state.name}</p>\n                    You've completed {this.state.tasksCompleted} tasks so far\n                    <br></br><br></br><br></br>\n                    <div>\n                        <button className=\"btn btn-success\" onClick={this.pushDataHelper}> save your changes!</button>\n                        {hasChangedMessage}\n                        {updateFailedMessage}\n                        {updateSuccessMessage}\n                    </div>\n                </div>\n                <div className=\"align\">\n                    <button className=\"btn btn-info\" onClick={this.switchViews}> {sortedButtonText}</button>\n                </div>\n                {viewSpecificContent}\n            </div>\n        )\n    }\n}\n\nclass SortedView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            schedule: this.props.schedule,\n            keyCount: this.props.keyCount\n        }\n\n\n        this.compareDates = this.compareDates.bind(this);\n        this.sortTask = this.sortTask.bind(this);\n    }\n\n    componentWillMount() {\n        this.sortTask()\n    }\n\n\n    compareDates(task1, task2) {\n        //if task1 doesn't have a deadline but task2 does, put task2 before task1\n        if (!task1.deadline && task2.deadline) {\n            return 1\n        }\n\n        if (task1.deadline && !task2.deadline) {\n            return -1\n        }\n        let task1Date = combineDate(new Date(task1.deadline), moment(task1.deadlineHour))\n        let task2Date = combineDate(new Date(task2.deadline), moment(task2.deadlineHour))\n        return task1Date.valueOf() - task2Date.valueOf()\n\n\n    }\n\n    sortTask() {\n        let copiedTaskList = []\n        for (let category in this.props.schedule) {\n            let tasklist = this.props.schedule[category]\n            for (let task in tasklist) {\n                let copiedTask = tasklist[task]\n                copiedTask['name'] = task\n                copiedTask['category'] = category\n                copiedTaskList.push(copiedTask)\n            }\n        }\n\n        copiedTaskList.sort(this.compareDates)\n        return copiedTaskList\n    }\n\n    render() {\n        let copiedTaskList = this.sortTask()\n        return (\n\n            <div className='align'>\n                <br/>\n                {copiedTaskList.map((task) =>\n                    <div className='text'>\n                        <Item category={task['category']}\n                              deleteTaskFunc={this.props.deleteTaskFunc}\n                              taskName={task['name']}\n                              task={task}\n                              updateItemFunc={this.props.updateItemFunc}\n                              key={task['key']}\n                              id={task['key']}\n                              timezone={this.props.timezone}\n                              trackingTask={this.props.trackingTask}\n                              markAsCompleteFunc={this.props.markAsCompleteFunc}\n                        />\n                    </div>\n                )}\n            </div>)\n\n\n    }\n\n}\n\n\nclass CategoryList extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n\n        return (\n            <div className=\"align\">\n                {Object.keys(this.props.categories).map((key) =>\n                    <div className=\"category text\">\n                        <Category deleteCategoryFunc={this.props.deleteCategoryFunc}\n                                  addTaskFunc={this.props.addTaskFunc}\n                                  trackTask={this.props.trackTask} categoryName={key}\n                                  deleteTaskFunc={this.props.deleteTaskFunc}\n                                  items={this.props.categories[key]}\n                                  updateItemFunc={this.props.updateItemFunc}\n                                  timezone={this.props.timezone}\n                                  trackingTask={this.props.trackingTask}\n                                  markAsCompleteFunc={this.props.markAsCompleteFunc}\n                        />\n                    </div>)}\n            </div>)\n    }\n\n}\n\nclass Category extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            collapsed: true,\n            potentialTask: ''\n        }\n\n        this.collapseOrExpand = this.collapseOrExpand.bind(this);\n        this.trackTask = this.trackTask.bind(this);\n        this.pushPotentialTask = this.pushPotentialTask.bind(this);\n    }\n\n    collapseOrExpand() {\n        if (this.state.collapsed) {\n            this.setState({collapsed: false})\n        } else {\n            this.setState({collapsed: true})\n        }\n    }\n\n    trackTask(event) {\n        this.setState({potentialTask: event.target.value})\n    }\n\n    pushPotentialTask(event, potentialTask) {\n        this.setState({potentialTask: ''})\n        this.props.addTaskFunc(event, potentialTask)\n    }\n\n\n    //why cant i assign the difference in renders to a variable and then stick that variable in the body??\n    render() {\n        if (!this.state.collapsed) {\n            return (\n                <div className=\"align\">\n                    <h1> {this.props.categoryName}\n                        <button value={this.props.categoryName} onClick={this.props.deleteCategoryFunc}\n                                className=\"btn btn-danger btn-sm\">Delete\n                        </button>\n                        <button onClick={this.collapseOrExpand} className=\"btn btn-warning btn-sm\"> Collapse</button>\n                    </h1>\n                    <input onChange={this.trackTask} value={this.state.potentialTask} placeholder=\"task name\"/>\n                    <button className=\"btn btn-success btn-sm\" value={this.props.categoryName}\n                            onClick={(e) => this.pushPotentialTask(e, this.state.potentialTask)}> add task\n                    </button>\n                    <br></br><br></br>\n                    <ItemList category={this.props.categoryName}\n                              deleteTaskFunc={this.props.deleteTaskFunc}\n                              items={this.props.items}\n                              updateItemFunc={this.props.updateItemFunc}\n                              timezone={this.props.timezone}\n                              collapsed={this.state.collapsed}\n                              markAsCompleteFunc={this.props.markAsCompleteFunc}\n                    />\n                </div>\n            )\n        } else {\n            return (\n                <div className='align'>\n                    <h1>\n                        {this.props.categoryName}\n                        <span></span>\n                        <button value={this.props.categoryName} onClick={this.props.deleteCategoryFunc}\n                                className=\"btn btn-danger btn-sm\">Delete\n                        </button>\n                        <button onClick={this.collapseOrExpand} className=\"btn btn-warning btn-sm\"> Expand</button>\n                    </h1>\n                    <p><i>{Object.keys(this.props.items).length} items hidden</i></p>\n                </div>\n            )\n        }\n    }\n}\n\n\nclass ItemList extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n\n        return (\n            <div className='align'>\n                {Object.keys(this.props.items).map((key) =>\n                    <div className='align'>\n                        <Item category={this.props.category}\n                              deleteTaskFunc={this.props.deleteTaskFunc}\n                              taskName={key}\n                              task={this.props.items[key]}\n                              updateItemFunc={this.props.updateItemFunc}\n                              timezone={this.props.timezone}\n                              collapsed={this.props.collapsed}\n                              key={this.props.items[key].key}\n                              id={this.props.items[key].key}\n                              trackingTask={this.props.trackingTask}\n                              markAsCompleteFunc={this.props.markAsCompleteFunc}\n                        />\n                    </div>)}\n            </div>\n        )\n    }\n}\n\nconst format = 'h:mm a';\n\n\nclass Item extends React.Component {\n    constructor(props) {\n        console.log('item constructor')\n        super(props);\n        this.state = {\n            name: this.props.taskName,\n            category: this.props.category,\n            inEditingMode: false,\n            hasDeadline: this.props.task.hasDeadline,\n            hasDeadlineHour: this.props.task.hasDeadlineHour,\n            deadline: this.props.task.deadline,\n            progress: this.props.task.progress,\n            deadlineHour: this.props.task.deadlineHour,\n            timezone: this.props.timezone,\n            timer: moment().format(),\n            id: this.props.id,\n            note: this.props.task.note,\n            notificationDate: this.props.task.notificationDate,\n            notificationHour: this.props.task.notificationHour\n        }\n\n\n        this.toggleEdit = this.toggleEdit.bind(this);\n        this.trackDeadline = this.trackDeadline.bind(this);\n        this.trackProgress = this.trackProgress.bind(this);\n        this.trackDeadlineHour = this.trackDeadlineHour.bind(this);\n        this.combineDate = this.combineDate.bind(this);\n        this.trackNotes = this.trackNotes.bind(this);\n        this.trackNotificationDate = this.trackNotificationDate.bind(this);\n        this.trackNotificationHour = this.trackNotificationHour.bind(this);\n    }\n\n    componentWillUnmount() {\n        console.log(\"item unmounted!\")\n    }\n\n    //clean up these conditionals,looks bad.\n    toggleEdit(pushChanges) {\n\n        if (this.state.inEditingMode && (!this.state.hasDeadline || !this.state.hasDeadlineHour)) {\n            alert(\"you have to enter both a deadline date and deadline hour!\")\n            return\n        } else if (this.state.inEditingMode && ((this.state.notificationDate && !this.state.notificationHour) ||\n            (!this.state.notificationDate && this.state.notificationHour))) {\n            alert('you need to fill out both notification date and hour, or leave them both blank.')\n            return\n        } else if (this.state.inEditingMode && this.state.hasDeadline && this.state.hasDeadlineHour) {\n            this.setState({inEditingMode: false})\n        } else {\n            this.setState({inEditingMode: true})\n        }\n        if (pushChanges) {\n            this.props.updateItemFunc(this.state)\n        }\n\n\n    }\n\n    trackDeadline(day) {\n        this.setState({deadline: day.toString()})\n        this.setState({hasDeadline: true})\n    }\n\n    trackProgress(e) {\n        let newProgress = e.target.value;\n        this.setState({progress: newProgress})\n    }\n\n    trackDeadlineHour(hour) {\n        this.setState({deadlineHour: hour.toString()})\n        this.setState({hasDeadlineHour: true})\n    }\n\n    combineDate(dateObj, hoursObj) {\n        let combinedDate = new Date(dateObj.toLocaleDateString())\n        combinedDate.setHours(hoursObj.hours())\n        combinedDate.setMinutes(hoursObj.minutes())\n        let newDeadlineDate = moment(combinedDate);\n        return newDeadlineDate\n    }\n\n    trackNotes(event) {\n        this.setState({note: event.target.value})\n    }\n\n    //to iso string maybe timezone naive, so maybe errors?\n    trackNotificationDate(day) {\n\n        this.setState({notificationDate: day.toISOString()})\n    }\n\n    trackNotificationHour(hour) {\n\n        this.setState({notificationHour: hour.format()})\n    }\n\n    render() {\n        console.log(\"item key\",this.props.id)\n        let deadline = ''\n        let timeLeft = ''\n        let deadlineHourPlaceHolder = 'pick an hour'\n        let deadlineDatePlaceholder = 'pick a date'\n        let notes = ''\n        let notificationDatePlaceholder = 'pick a date'\n        let notificationHourPlaceholder = 'pick an hour'\n        let notificationDate = <p style={{color: '#FF652F'}} id='notes'><b> edit and pick a date and time to be notified\n            at</b></p>\n\n        if (this.state.notificationDate && this.state.notificationHour) {\n            notificationDate =\n                <p style={{color: '#FF652F'}}> {new Date(this.state.notificationDate).toLocaleDateString() + ' ' + moment(this.state.notificationHour).format(format)}</p>\n            notificationDatePlaceholder = new Date(this.state.notificationDate).toLocaleDateString()\n            notificationHourPlaceholder = moment(this.state.notificationHour).format(format)\n        }\n\n        if (!this.state.note) {\n            notes = <p style={{color: '#FF652F'}} id='notes'><b>edit to write notes.</b></p>\n        } else {\n            notes = <p style={{color: '#FF652F'}} id='notes'> {this.state.note}</p>\n        }\n\n\n        //if the user has entered a date and a time for the task\n        if (this.state.hasDeadline && this.state.hasDeadlineHour) {\n            deadline = new Date(this.state.deadline).toLocaleDateString() + ' ' + moment(this.state.deadlineHour).format(format)\n            deadlineDatePlaceholder = new Date(this.state.deadline).toLocaleDateString()\n            deadlineHourPlaceHolder = moment(this.state.deadlineHour).format(format)\n\n            let currentTime = moment.tz(this.props.timezone)\n            let fullDeadlineDate = this.combineDate(new Date(this.state.deadline), moment(this.state.deadlineHour)).tz(this.props.timezone)\n\n            timeLeft = <TimeLeftTimer\n                timezone={this.props.timezone}\n                deadlineDate={fullDeadlineDate}\n            />\n\n            if (fullDeadlineDate.isBefore(currentTime)) {\n                timeLeft = <b style={{color: 'red'}}>deadline passed!</b>\n                //if the deadline is after current time, set up the timer to display time left.\n            }\n\n            //user has not entered in a date or time.\n        } else {\n            deadline = <b>edit and set a deadline </b>\n            timeLeft = <b>this task needs a deadline </b>\n        }\n\n\n        if (!this.state.inEditingMode) {\n            return (\n                <div className=\"itembox\">\n                    <div className=\"itemboxheader\">\n                        <h3 style={{margin: 0}}><b>{this.props.taskName}</b></h3>\n                        <button className=\"btn btn-warning btn-xs\" onClick={() => this.toggleEdit(false)}> Edit</button>\n                        <button\n                            onClick={() => this.props.deleteTaskFunc({\n                                category: this.props.category,\n                                name: this.props.taskName\n                            })}\n                            className=\"btn btn-danger btn-xs\"> Delete\n                        </button>\n                        <button className=\"btn btn-success btn-xs2\"\n                                onClick={() => this.props.markAsCompleteFunc({\n                                    category: this.props.category,\n                                    name: this.props.taskName\n                                })}>\n                            Mark as complete!\n                        </button>\n\n                    </div>\n\n                    <ul>\n                        <li> deadline:<span style={{color: '#FF652F'}}>{deadline}</span></li>\n                        <li> time left:<span style={{color: '#FF652F'}}> {timeLeft}</span></li>\n                        <li>\n                            progress:\n                            <div className=\"progress\">\n                                <div className=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"70\"\n                                     aria-valuemin=\"0\" aria-valuemax=\"100\" style={{width: this.state.progress + '%'}}>\n                                    {this.state.progress}%\n                                </div>\n                            </div>\n                        </li>\n                        <li>Notes:{notes} </li>\n                        <li>Notification Date: {notificationDate}</li>\n                    </ul>\n                </div>\n            )\n        } else {\n\n            return (\n                <div className=\"align itembox\">\n                    <h5> {this.props.taskName} </h5>\n                    <ul>\n                        <li> deadline:\n                            <DayPickerInput\n                                placeholder={deadlineDatePlaceholder}\n                                onDayChange={day => this.trackDeadline(day)}\n                            />\n                            <TimePicker\n                                showSecond={false}\n                                placeholder={deadlineHourPlaceHolder}\n                                className=\"xxx\"\n                                onChange={(value) => this.trackDeadlineHour(value)}\n                                format={format}\n                                use12Hours\n                                inputReadOnly\n                            />\n                        </li>\n\n                        <li> progress: <input value={this.state.progress} onChange={this.trackProgress} type='range'/>\n                            <div className=\"progress\">\n                                <div className=\"progress-bar\" role=\"progressbar\"\n                                     aria-valuemin=\"0\" aria-valuemax=\"100\" style={{width: this.state.progress + '%'}}>\n                                    {this.state.progress}%\n                                </div>\n                            </div>\n                        </li>\n                        <li> notes: <textarea value={this.state.note} onChange={this.trackNotes}\n                                              className='form-control' rows='4'> </textarea></li>\n                        <li> set notication date:\n                            <DayPickerInput\n                                placeholder={notificationDatePlaceholder}\n                                onDayChange={day => this.trackNotificationDate(day)}\n                            />\n                            <TimePicker\n                                showSecond={false}\n                                placeholder={notificationHourPlaceholder}\n                                className=\"xxx\"\n                                onChange={value => this.trackNotificationHour(value)}\n                                format={format}\n                                use12Hours\n                                inputReadOnly\n                            />\n                        </li>\n                    </ul>\n                    <button className=\"btn btn-success btn-sm\" onClick={() => this.toggleEdit(true)}> save</button>\n                </div>\n            )\n        }\n\n    }\n}\n\nclass TimeLeftTimer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            timer: moment().format(),\n            interval: ''\n        }\n\n        this.timer = this.timer.bind(this);\n    }\n\n    timer() {\n        console.log('timer running')\n        let currentTime = moment.tz(this.props.timezone)\n        let difference = moment.duration(this.props.deadlineDate.diff(currentTime))\n        if (this.props.deadlineDate.isBefore(currentTime)) {\n            this.setState({timer: <span style={{color: 'red'}}>deadline passed!</span>})\n            clearInterval(this.state.interval)\n\n        } else {\n            this.setState({\n                timer: difference.days() + 'd ' + difference.hours() + 'h ' + difference.minutes() + 'm '\n                    + difference.seconds() + 's'\n            })\n        }\n\n    }\n\n\n    componentDidMount() {\n        this.setState({interval: setInterval(this.timer, 1000)})\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.state.interval)\n    }\n\n    render() {\n        return (\n            <div style={{color: '#FF652F'}}>\n                {this.state.timer}\n            </div>\n        )\n\n    }\n\n}\n\n\n// ReactDOM.render(\n//     <App/>,\n//     document.getElementById('root')\n// );\n\n\nexport default HomePage;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport HomePage from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<HomePage />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}